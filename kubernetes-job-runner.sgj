{"jobDefs":[{"version":"0.0","name":"Kubernetes Job Runner","maxInstances":1,"pauseOnJobFail":false,"runtimeVars":{},"schedules":[{"TriggerType":"cron","name":"run sample_app_1","isActive":false,"runtimeVars":{"FunctionKwargs":{"sensitive":false,"format":"yaml","value":"image_name: sample_app_1\nimage_tag: v0.0.1\njob_name: sample-app-1-job\nlabels:\n  jobGroup: saasglue\nnamespace: default"}},"cron":{"Second":"1","Timezone":"Etc/Greenwich"},"interval":{}},{"TriggerType":"cron","name":"run sample_app_2","isActive":false,"runtimeVars":{"FunctionKwargs":{"sensitive":false,"format":"yaml","value":"image_name: sample_app_2\nimage_tag: v0.0.1\njob_name: sample-app-2-job\nlabels:\n  jobGroup: saasglue\nnamespace: default"}},"cron":{"Second":"1","Timezone":"Etc/Greenwich"},"interval":{}}],"taskDefs":[{"target":4,"name":"Run Job","requiredTags":{"role":"kubernetes_job_runner"},"fromRoutes":[],"toRoutes":[],"autoRestart":false,"stepDefs":[{"name":"run","order":1,"command":"","arguments":"","variables":{},"lambdaCodeSource":"script","lambdaRuntime":"","lambdaMemorySize":128,"lambdaTimeout":3,"lambdaFunctionHandler":"","lambdaAWSRegion":"","lambdaDependencies":"","lambdaZipfile":"","scriptName":"CreateKubernetesJob.py"}],"exportWarnings":[]}]}],"scripts":[{"name":"CreateKubernetesJob.py","scriptType":0,"code":"aW1wb3J0IGpzb24KaW1wb3J0IHJlCmltcG9ydCBzeXMKaW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCB5YW1sCgpAc2dzKCJLdWJlcm5ldGVzQWNjZXNzLnB5IikKCmpvYl9zdGFydGVkID0gRmFsc2UKam9iX2NvbXBsZXRlZCA9IEZhbHNlCnNjaGVkdWxlZF90aW1lID0gIiIKbmFtZXNwYWNlID0gImRlZmF1bHQiCmt1YmVybmV0ZXNfYWNjZXNzID0gTm9uZQpwb2RzID0gW10KcG9kX3N0YXR1cyA9IHt9CgoKZGVmIGNyZWF0ZV9rdWJlcm5ldGVzX2pvYigqKmt3YXJncyk6CiAgICBrdWJlcm5ldGVzX25hbWVzcGFjZSA9IGt3YXJnc1sibmFtZXNwYWNlIl0KICAgIHByaW50KAogICAgICAgIGpzb24uZHVtcHMoewogICAgICAgICAgICAibWVzc2FnZSI6ICJDcmVhdGluZyBqb2IiLAogICAgICAgICAgICAiZGF0YSI6IGt3YXJncywKICAgICAgICB9KQogICAgKQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgogICAgaW1hZ2UgPSBrd2FyZ3NbImltYWdlX25hbWUiXQogICAgaWYgImltYWdlX3RhZyIgaW4ga3dhcmdzOgogICAgICAgIGltYWdlX3RhZyA9IGt3YXJnc1siaW1hZ2VfdGFnIl0KICAgICAgICBpbWFnZSA9IGYie2ltYWdlfTp7aW1hZ2VfdGFnfSIKCiAgICBjb21tYW5kID0ga3dhcmdzLmdldCgiY29tbWFuZCIpCgogICAgc2VydmljZV9hY2NvdW50X25hbWUgPSBrd2FyZ3MuZ2V0KCJzZXJ2aWNlX2FjY291bnRfbmFtZSIpCgogICAgaW1hZ2VfcHVsbF9wb2xpY3kgPSBrd2FyZ3MuZ2V0KCJpbWFnZV9wdWxsX3BvbGljeSIpIG9yICJJZk5vdFByZXNlbnQiCgogICAgZW52X3ZhcnMgPSBrd2FyZ3MuZ2V0KCJlbnYiKQoKICAgIHNlY3JldHMgPSBrd2FyZ3MuZ2V0KCJzZWNyZXRzIikKCiAgICB2b2x1bWVfY2xhaW1zID0ga3dhcmdzLmdldCgidm9sdW1lcyIpCgogICAgYWZmaW5pdGllcyA9a3dhcmdzLmdldCgiYWZmaW5pdGllcyIpCgogICAgdG9sZXJhdGlvbnMgPSBrd2FyZ3MuZ2V0KCJ0b2xlcmF0aW9ucyIpCgogICAgbGFiZWxzID0ga3dhcmdzLmdldCgibGFiZWxzIikKCiAgICBjb25maWdfbWFwcyA9IGt3YXJncy5nZXQoImNvbmZpZ19tYXBzIikKCiAgICBqb2Jfb2JqZWN0ID0ga3ViZXJuZXRlc19hY2Nlc3MuY3JlYXRlX2pvYl9vYmplY3QoCiAgICAgICAgY29udGFpbmVyX2ltYWdlPWltYWdlLAogICAgICAgIGltYWdlX3B1bGxfcG9saWN5PWltYWdlX3B1bGxfcG9saWN5LAogICAgICAgIG5hbWVzcGFjZT1rdWJlcm5ldGVzX25hbWVzcGFjZSwKICAgICAgICBjb250YWluZXJfbmFtZT1rd2FyZ3NbImpvYl9uYW1lIl0sCiAgICAgICAgc2VydmljZV9hY2NvdW50X25hbWU9c2VydmljZV9hY2NvdW50X25hbWUsCiAgICAgICAgY29tbWFuZD1jb21tYW5kLAogICAgICAgIGxhYmVscz1sYWJlbHMsCiAgICAgICAgZW52X3ZhcnM9ZW52X3ZhcnMsCiAgICAgICAgc2VjcmV0cz1zZWNyZXRzLAogICAgICAgIGNvbmZpZ19tYXBzPWNvbmZpZ19tYXBzLAogICAgICAgIGFmZmluaXRpZXM9YWZmaW5pdGllcywKICAgICAgICB0b2xlcmF0aW9ucz10b2xlcmF0aW9ucywKICAgICAgICB2b2x1bWVfY2xhaW1zPXZvbHVtZV9jbGFpbXMsCiAgICApCiAgICByZXR1cm4ga3ViZXJuZXRlc19hY2Nlc3MuY3JlYXRlX2pvYihrdWJlcm5ldGVzX25hbWVzcGFjZSwgam9iX29iamVjdCkKCmRlZiBvbl9wb2RfbG9nKG1lc3NhZ2UpOgogICAgcHJpbnQoCiAgICAgICAgewogICAgICAgICAgICAibWVzc2FnZSI6ICJQb2QgbG9nIG1lc3NhZ2UgcmVjZWl2ZWQiLAogICAgICAgICAgICAiY29udGVudCI6IG1lc3NhZ2UKICAgICAgICB9CiAgICApCiAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKCmRlZiBvbl9wb2RfdXBkYXRlKHBvZCk6CiAgICBnbG9iYWwgcG9kcwogICAgZ2xvYmFsIHBvZF9zdGF0dXMKICAgIGdsb2JhbCBuYW1lc3BhY2UKICAgIGdsb2JhbCBrdWJlcm5ldGVzX2FjY2VzcwoKICAgIHBvZF9uYW1lID0gcG9kLm1ldGFkYXRhLm5hbWUKICAgIHVwZGF0ZWRfc3RhdHVzID0gcG9kLnN0YXR1cy5waGFzZSAgICAKICAgIGlmIHBvZF9uYW1lIG5vdCBpbiBwb2RzOgogICAgICAgIHBvZHMuYXBwZW5kKHBvZF9uYW1lKQogICAgICAgIHBvZF9zdGF0dXNbcG9kX25hbWVdID0gcG9kLnN0YXR1cy5waGFzZQogICAgaWYgdXBkYXRlZF9zdGF0dXMgIT0gcG9kX3N0YXR1c1twb2RfbmFtZV06CiAgICAgICAgcG9kX3N0YXR1c1twb2RfbmFtZV0gPSB1cGRhdGVkX3N0YXR1cwogICAgICAgIHByaW50KAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAibWVzc2FnZSI6ICJQb2QgdXBkYXRlIiwgCiAgICAgICAgICAgICAgICAibmFtZSI6IHBvZF9uYW1lLCAKICAgICAgICAgICAgICAgICJzdGF0dXMiOiB1cGRhdGVkX3N0YXR1cwogICAgICAgICAgICB9CiAgICAgICAgKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIGlmIHVwZGF0ZWRfc3RhdHVzLnVwcGVyKCkgPT0gIlJVTk5JTkciOgogICAgICAgICAgICBrdWJlcm5ldGVzX2FjY2Vzcy53YXRjaF9wb2RfbG9nc19hc3luYyhuYW1lc3BhY2UsIHBvZF9uYW1lLCBvbl9wb2RfbG9nKQoKZGVmIG9uX2pvYl91cGRhdGUoam9iKToKICAgIGdsb2JhbCBqb2Jfc3RhcnRlZAogICAgZ2xvYmFsIGpvYl9jb21wbGV0ZWQKICAgIGdsb2JhbCBzY2hlZHVsZWRfdGltZQogICAgZ2xvYmFsIG5hbWVzcGFjZQogICAgZ2xvYmFsIGt1YmVybmV0ZXNfYWNjZXNzCiAgICAKICAgIGlmIG5vdCBqb2Jfc3RhcnRlZCBhbmQgam9iLnN0YXR1cy5zdGFydF90aW1lIGlzIG5vdCBOb25lOgogICAgICAgIGpvYl9zdGFydGVkID0gVHJ1ZQogICAgICAgIHByaW50KAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAibWVzc2FnZSI6ICJKb2Igc3RhcnRlZCIsCiAgICAgICAgICAgICAgICAic3RhcnRfdGltZSI6IGpvYi5zdGF0dXMuc3RhcnRfdGltZSwKICAgICAgICAgICAgICAgICJzY2hlZHVsZWRfdGltZSI6IHNjaGVkdWxlZF90aW1lCiAgICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgbGFiZWxfc2VsZWN0b3I9ZiJqb2ItbmFtZT17am9iLm1ldGFkYXRhLm5hbWV9IgogICAgICAgIGpvYl9wb2RzID0ga3ViZXJuZXRlc19hY2Nlc3MuZ2V0X3BvZChuYW1lc3BhY2U9bmFtZXNwYWNlLCBsYWJlbF9zZWxlY3Rvcj1sYWJlbF9zZWxlY3RvcikKICAgICAgICBpZiBsZW4oam9iX3BvZHMuaXRlbXMpID4gMDoKICAgICAgICAgICAgcG9kID0gam9iX3BvZHMuaXRlbXNbMF0KICAgICAgICAgICAga3ViZXJuZXRlc19hY2Nlc3Mud2F0Y2hfcG9kX2FzeW5jKG5hbWVzcGFjZSwgcG9kLm1ldGFkYXRhLm5hbWUsIGxhYmVsX3NlbGVjdG9yLCBvbl9wb2RfdXBkYXRlKQogICAgaWYgbm90IGpvYl9jb21wbGV0ZWQgYW5kIGpvYi5zdGF0dXMuY29tcGxldGlvbl90aW1lIGlzIG5vdCBOb25lOgogICAgICAgIGpvYl9jb21wbGV0ZWQgPSBUcnVlCiAgICAgICAgcHJpbnQoCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJtZXNzYWdlIjogIkpvYiBjb21wbGV0ZWQiLAogICAgICAgICAgICAgICAgImNvbXBsZXRpb25fdGltZSI6IGpvYi5zdGF0dXMuY29tcGxldGlvbl90aW1lCiAgICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgb3MuX2V4aXQoMCkKCnNjaGVkdWxlZF90aW1lID0gJ0BzZ2coInNjaGVkdWxlZF90aW1lIiknCgprd2FyZ3MgPSB5YW1sLnNhZmVfbG9hZCgiIiJAc2dnKCJGdW5jdGlvbkt3YXJncyIpIiIiKQoKbmFtZXNwYWNlID0ga3dhcmdzWyJuYW1lc3BhY2UiXQoKa3ViZXJuZXRlc19hY2Nlc3MgPSBLdWJlcm5ldGVzQWNjZXNzKG5hbWVzcGFjZSkKCmpvYl9uYW1lID0gY3JlYXRlX2t1YmVybmV0ZXNfam9iKCoqa3dhcmdzKQoKa3ViZXJuZXRlc19hY2Nlc3Mud2F0Y2hfam9iX2FzeW5jKG5hbWVzcGFjZSwgam9iX25hbWUsIG9uX2pvYl91cGRhdGUpCg==","teamUsable":true,"teamEditable":false,"isActive":true},{"name":"KubernetesAccess.py","scriptType":0,"code":"","teamUsable":true,"teamEditable":false,"isActive":true}]}